// Generated by CoffeeScript 1.10.0
(function() {
  var Migrator, crypto, fs, hasher, nano, path,
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  nano = require('nano');

  path = require('path');

  crypto = require('crypto');

  hasher = crypto.createHash('sha256');

  Migrator = (function() {
    function Migrator(uri, baseDirectory) {
      this.uri = uri;
      this.baseDirectory = baseDirectory;
      console.log(this.uri, this.baseDirectory);
      this.db = nano(this.uri);
    }

    Migrator.prototype.updateIfNecessary = function() {
      var file, files, i, id, len, results;
      files = fs.readdirSync(this.baseDirectory);
      console.log(files);
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        id = "_design/" + path.basename(file, '.js');
        results.push(this.db.get(id, (function(_this) {
          return function(err, doc) {
            var absFilePath, hash, name, obj, view, views;
            absFilePath = path.join(_this.baseDirectory, path.basename(file, '.js'));
            console.log(absFilePath);
            obj = require(absFilePath);
            views = {};
            for (name in obj) {
              if (!hasProp.call(obj, name)) continue;
              view = obj[name];
              if (view.map) {
                view.map = view.map.toString();
              }
              if (view.reduce) {
                view.reduce = view.reduce.toString();
              }
              views[name] = view;
            }
            console.log("id", id);
            console.log(views);
            hasher.update(JSON.stringify(views), 'utf8');
            hash = hasher.digest('hex');
            if (err) {
              doc = {
                _id: id
              };
              doc.language = 'javascript';
              doc.hash = hash;
              doc.views = views;
              return _this.db.insert(doc, function(err, ret) {
                console.log(err);
              });
            } else if (doc && doc.hash !== hash) {
              doc.views = views;
              doc.hash = hash;
              return _this.db.insert(doc, function(err, ret) {
                return console.log(err);
              });
            }
          };
        })(this)));
      }
      return results;
    };

    return Migrator;

  })();

  module.exports = Migrator;

}).call(this);
